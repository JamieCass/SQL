1.
Print respective hacker_id and name of hackers who achieved full scores for more than one challenge
Order output in desc order by total number of challenges the hacker earned full score
If more than one received full scores in same number of challenges sort by ascending hacker_id


hackers table - h
	hacker_id 
	name

difficulty table - d
	difficulty_level
	score

challenges table - c
	challenge_id
	hacker_id
	difficulty_level

submissions table - s
	submission_id
	hacker_id
	challenge_id
	score

SELECT T2.id, T2.name
FROM (
    SELECT SUM(T1.tally) AS tally_sum, T1.hacker_id AS id, T1.name AS name
    FROM (
        SELECT h.hacker_id AS hacker_id , h.name AS name,
        CASE WHEN s.score = d.score THEN 1 ELSE 0 END AS tally
        FROM hackers h 
        JOIN submissions s ON h.hacker_id = s.hacker_id
        JOIN challenges c ON c.challenge_id = s.challenge_id
        JOIN difficulty d ON d.difficulty_level = c.difficulty_level)  AS T1
    GROUP BY 2, 3
    HAVING SUM(T1.tally) > 1) AS T2
ORDER BY T2.tally_sum DESC, 1;




2. 
Print the id, age, coins_needed and power of the wands that Ron's interested in (non-evil).
Sort in order of descending power. If more than one wand has the same power, sort in order of descending age.


wands table - w
	id
	code
	coins_needed
	power

wandss_property table - wp
	code
	age
	is_evil 

SELECT w.id, wp.age, MIN(w.coins_needed), w.power
FROM wands w
JOIN wands_property wp ON wp.code = w.code
WHERE wp.is_evil = 0
GROUP BY 1,2,4
ORDER BY w.power, wp.age DESC; 










