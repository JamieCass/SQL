1.
Print respective hacker_id and name of hackers who achieved full scores for more than one challenge
Order output in desc order by total number of challenges the hacker earned full score
If more than one received full scores in same number of challenges sort by ascending hacker_id


hackers table - h
	hacker_id 
	name

difficulty table - d
	difficulty_level
	score

challenges table - c
	challenge_id
	hacker_id
	difficulty_level

submissions table - s
	submission_id
	hacker_id
	challenge_id
	score

SELECT T2.id, T2.name
FROM (
    SELECT SUM(T1.tally) AS tally_sum, T1.hacker_id AS id, T1.name AS name
    FROM (
        SELECT h.hacker_id AS hacker_id , h.name AS name,
        CASE WHEN s.score = d.score THEN 1 ELSE 0 END AS tally
        FROM hackers h 
        JOIN submissions s ON h.hacker_id = s.hacker_id
        JOIN challenges c ON c.challenge_id = s.challenge_id
        JOIN difficulty d ON d.difficulty_level = c.difficulty_level)  AS T1
    GROUP BY 2, 3
    HAVING SUM(T1.tally) > 1) AS T2
ORDER BY T2.tally_sum DESC, 1;




2. 
Ron wants the minimun number of gold galleons needed to buy each non-evil wand.
Print the id, age, coins_needed and power of the wands that Rons interested in (non-evil).
Sort in order of descending power. If more than one wand has the same power, sort in order of descending age.


wands table - w
	id
	code
	coins_needed
	power

wands_property table - wp
	code
	age
	is_evil 

SELECT w.id, t1.age, t1.min_coins, t1.power
FROM (
    SELECT wp.age, MIN(w.coins_needed) AS min_coins, w.power, w.code
    FROM wands w
    JOIN wands_property wp ON wp.code = w.code
    WHERE wp.is_evil = 0 
    GROUP BY 1,3,4) AS t1
JOIN wands w ON w.code = t1.code AND w.coins_needed = t1.min_coins AND w.power = t1.power
ORDER BY t1.power DESC, t1.age DESC, t1.min_coins; 



3.
Julia asks students to create some code challenges
Print the hacker_id, name and total number of challenges created by each student
Sort results by challenges in descending order. If more than one student has the same number of challenges sort the result by the hacker_id.
If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude thos students from the result.


hackers table - h 
	hacker_id
	name

challenges table - c 
	challenge_id
	hacker_id

/* count total submissions of challenges of each user */
WITH data AS 
	(
	SELECT c.hacker_id as id, h.name as name, count(c.hacker_id) as counter
	FROM Hackers h
	JOIN Challenges c on c.hacker_id = h.hacker_id
	GROUP BY c.hacker_id, h.name
	)
/* select records from above */
SELECT id,name,counter
FROM data
WHERE
counter=(SELECT max(counter) FROM data) /*select user that has max count submission*/
OR
counter in (SELECT counter FROM data
GROUP BY counter
HAVING count(counter)=1 ) /*filter out the submission count which is unique*/
ORDER BY counter desc, id



